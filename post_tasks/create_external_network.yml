---
- name: External network validation
  hosts: undercloud
  gather_facts: no
  any_errors_fatal: true
  tasks:
      - fail:
            msg: "--deployment-files is required"
        when: install.get('deployment', {}).files is not defined

      - fail:
            msg: "--network-protocol is required"
        when: install.get('network', {}).protocol is not defined

      - fail:
            msg: "--public-subnet is required"
        when: install.get('public', {}).subnet is not defined

- import_playbook: ../service_discovery.yml
  vars:
      services: ['nova-scheduler']

# This playbook is used to enable external network access to virthost or baremetal deployments and it is
# intended to be used as post-deployment step. It does not create private networks and router as it is
# users responsibility.
# This playbook gathers data from template_base used in ospd installer!
# Playbook is idempotent

- name: External network creation
  hosts: undercloud
  gather_facts: yes
  any_errors_fatal: true
  vars_files:
      - "{{ install.public.subnet }}"
  vars:
      source_dir: "{{ install.deployment.files }}"
      network_environment_file: "network-environment{{ (install.network.protocol == 'ipv6') | ternary('-v6','') }}{{ (install.network.protocol == 'ipv6-all') | ternary('-v6-all','') }}.yaml"
      physnet_name: datacentre
      template_base: "{{ ansible_user_dir }}/{{ source_dir | basename }}"
  tasks:
      - name: Check if /var/lib/config-data/puppet-generated/nova/etc/nova/nova.conf exists
        stat:
            path: /var/lib/config-data/puppet-generated/nova/etc/nova/nova.conf
        register: nova_conf_is_containerize
        delegate_to: "{{ groups.nova_scheduler | first }}"

      - name: Set nova.conf path
        set_fact:
            nova_conf: "{{ nova_conf_is_containerize.stat.exists|ternary('/var/lib/config-data/puppet-generated/nova/etc/nova/nova.conf', '/etc/nova/nova.conf') }}"

      - name: Install crudini package
        package:
            name: crudini
            state: present
        delegate_to: "{{ groups.nova_scheduler | first }}"
        become: yes

      - name: get the default floating ip pool name from the server
        shell: |
                crudini --get {{ nova_conf }} neutron default_floating_pool || \
                grep -oP "(?<=default_floating_pool=)(.*$)" {{ nova_conf }} || \
                awk -F'\"' '/default_floating_pool/ {print $4}' /etc/puppet/hieradata/service_configs.json
        register: pool_name
        delegate_to: "{{ groups.nova_scheduler | first }}"
        changed_when: false
        become: yes

      - name: check the deployment network configuration file
        find:
            paths: "{{ template_base }}"
            patterns: "{{ network_environment_file }}"
            recurse: yes
        register: network_environment_file_path

      # do not fail on missing template file.
      # if template is missing then network islation is not used
      # and the default parameters will be used for deployment

      - name: read deployment network configuration
        command: "cat {{ network_environment_file_path.files[0].path }}"
        register: network_template_out
        when: network_environment_file_path.matched > 0
        changed_when: false

      - name: load deployment network configuration as YAML
        set_fact:
            network_template: "{{ network_template_out.stdout | from_yaml }}"
        when: network_environment_file_path.matched > 0

      # for openstack v11 the OS_TENANT_NAME is replaced with OS_PROJECT_NAME
      # Trying to resolve OS_PROJECT_NAME and then OS_TENANT_NAME

      - name: Set network name
        set_fact:
            external_network_name: "{{ install.public.get('net', {}).name|default(pool_name.stdout_lines|last) }}"

      # The best way to figure out is vlan or the flat the right value at this point is
      # trying both ..
      # Neutron will refuse the wrong one.
      - name: external network try failure method
        block:
          - name: create the external network
            vars:
                physnet_type: "vlan"
                vlan_id: "{{ install.get('external', {}).vlan | default(((network_template|default({})).parameter_defaults|default({})).ExternalNetworkVlanID|default('')) }}"
                # Here can't be used {{ path_venv }}, because it's not a Jinja template
            shell: |
                source ~/{{ install.overcloud.stack }}rc
                openstack --insecure network create --name {{ external_network_name }} --external {{ install.external.shared | default(false) |ternary('--shared','--no-shared ') }} \
                --provider-physical-network {{ physnet_name }} \
                --provider-network-type {{ physnet_type }} \
                 {{ ('vlan' == physnet_type) | ternary(' --provider-segment ' + vlan_id, omit) }}
            when: not (install.external.transparent.vlan|default(false))

          # Neither os_network nor openstack.cloud.network ansible modules
          # support VLAN Transparency, so an opestack shell command needs to be
          # used instead
          - name: create the external network with vlan transparency
            vars:
                physnet_type: "vlan"
                vlan_id: "{{ install.get('external', {}).vlan | default(((network_template|default({})).parameter_defaults|default({})).ExternalNetworkVlanID|default('')) }}"
                share: "{{ (install.external.shared | default(no)) | ternary('--share', '--no-share') }}"
            shell: |
                source ~/{{ install.overcloud.stack }}rc
                openstack network create {{ external_network_name }} \
                    --external --transparent-vlan {{ share }} \
                    --provider-network-type {{ physnet_type }} \
                    --provider-segment {{ vlan_id }} \
                    --provider-physical-network {{ physnet_name }}
            when: install.external.transparent.vlan|default(false)

        rescue:
          - name: create the external network
            vars:
                physnet_type: "flat"
                vlan_id: "{{ install.get('external', {}).vlan | default(((network_template|default({})).parameter_defaults|default({})).ExternalNetworkVlanID|default('')) }}"
            shell: |
                source ~/{{ install.overcloud.stack }}rc
                openstack --insecure network create --name {{ external_network_name }} --external {{ install.external.shared | default(false) |ternary('--shared', '--no-shared') }} \
                --provider-physical-network {{ physnet_name }} \
                --provider-network-type {{ physnet_type }} \
                 {{ ('vlan' == physnet_type) | ternary(' --provider-segment ' + vlan_id, omit) }}
            when: not (install.external.transparent.vlan|default(false))

          # Neither os_network nor openstack.cloud.network ansible modules
          # support VLAN Transparency, so an opestack shell command needs to be
          # used instead
          - name: create the external network with vlan transparency
            vars:
                physnet_type: "flat"
                share: "{{ (install.external.shared | default(no)) | ternary('--share', '--no-share') }}"
            shell: |
                source ~/{{ install.overcloud.stack }}rc
                openstack network create {{ external_network_name }} \
                    --external --transparent-vlan {{ share }} \
                    --provider-network-type {{ physnet_type }} \
                    --provider-physical-network {{ physnet_name }}
            when: install.external.transparent.vlan|default(false)

      - name: set MTU for external network
        shell: |
            source ~/{{ install.overcloud.stack }}rc
            openstack network set {{ external_network_name }} --mtu {{ install.external.mtu }}
        when: install.external.mtu is defined

      - name: print network details to console
        shell: |
            source ~/{{ install.overcloud.stack }}rc
            neutron net-show {{ external_network_name }}
        tags: skip_ansible_lint
        changed_when: false

      - name: Initialize external_dhcp values
        set_fact:
            external_dhcp: "{{ install.external.dhcp | default(no) }}"
            ipv6_external_dhcp: "{{ install.external.dhcp | default(no) }}"

      - name: Overwrite external_dhcp value when defined in the subnet template
        set_fact:
            external_dhcp: "{{ subnet.enable_dhcp }}"
        when: subnet.enable_dhcp is defined

      - name: Overwrite ipv6_external_dhcp value when defined in the subnet template
        set_fact:
            ipv6_external_dhcp: "{{ ipv6_subnet.enable_dhcp }}"
        when: ipv6_subnet.enable_dhcp is defined

      # OSPD "External*" data can't be used to discover subnet details because:
      #     1) IPv6 public network is not supported as public network
      #     2) CIDR arithmetic is complicated. Only implement it when #1 is supported
      - name: create the external subnet
        vars:
            pool: "{{ subnet.allocation_pool|default({}) }}"
        shell: |
            source ~/{{ install.overcloud.stack }}rc
            openstack --insecure subnet create \
            --network  {{ external_network_name }}  {{ (external_dhcp  | default(no)) | ternary('--dhcp', '--no-dhcp') }} \
            --subnet-range {{ subnet.cidr }} \
            --gateway  {{ subnet.gateway }} \
            {{ pool|ternary('--allocation-pool start=' + pool.start + ',end='  pool.end, '') \
            {{ subnet.name | default('external_subnet') }}

      - name: print subnet details to console
        shell: |
            source ~/{{ install.overcloud.stack }}rc
            openstack subnet show {{ subnet.name | default('external_subnet') }}
        tags: skip_ansible_lint
        changed_when: false

      - name: create the IPv6 external subnet
        vars:
            # It's cleaner to define top defaults first
            pool: "{{ ipv6_subnet.allocation_pool|default({}) }}"
        shell: |
            source ~/{{ install.overcloud.stack }}rc
            openstack --insecure subnet create --ip-version 6 \
            --network {{ external_network_name }}  "{{ (external_dhcp  | default(no)) | ternary('--dhcp', '--no-dhcp') }} \
            --subnet-range {{ ipv6_subnet.cidr }} \
            --gateway  {{ subnet.gateway }} \
            {{ pool|ternary('--allocation-pool start=' + pool.start + ',end='  pool.end, '') }} \
            {{(ipv6_address_mode| default('') | ternary('--ipv6-address-mode ' + ipv6_address_mode, '') }} \
            {{ ipv6_subnet.ra_mode|default('') | ternary('--ipv6-ra-mode ' + ipv6_subnet.ra_mode, '' }}
            {{ ipv6_subnet.name | default('external_subnet') }}
        when: ipv6_subnet is defined

      - name: print subnet details to console
        shell: |
            source ~/{{ install.overcloud.stack }}rc
            openstack subnet show {{ ipv6_subnet.name | default('external_subnet') }}
        tags: skip_ansible_lint
        changed_when: false
        when: ipv6_subnet is defined
