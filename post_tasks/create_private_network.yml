# Create basic network resources, similar to a devstack env
---
- name: Private network creation
  hosts: undercloud
  gather_facts: yes
  any_errors_fatal: true
  vars_files:
      - "{{ install.private.subnet }}"
  tasks:
      - name: Check if /var/lib/config-data/puppet-generated/nova/etc/nova/nova.conf exists
        stat:
            path: /var/lib/config-data/puppet-generated/nova/etc/nova/nova.conf
        register: nova_conf_is_containerize
        delegate_to: "{{ groups.nova_scheduler | first }}"

      - name: Set nova.conf path
        set_fact:
            nova_conf: "{{ nova_conf_is_containerize.stat.exists|ternary('/var/lib/config-data/puppet-generated/nova/etc/nova/nova.conf', '/etc/nova/nova.conf') }}"

      - name: Install crudini package
        package:
            name: crudini
            state: present
        delegate_to: "{{ groups.nova_scheduler | first }}"
        become: yes

      - name: get the default floating ip pool name from the server
        shell: |
                crudini --get {{ nova_conf }} neutron default_floating_pool || \
                grep -oP "(?<=default_floating_pool=)(.*$)" {{ nova_conf }} || \
                awk -F'\"' '/default_floating_pool/ {print $4}' /etc/puppet/hieradata/service_configs.json
        register: pool_name
        delegate_to: "{{ groups.nova_scheduler | first }}"
        changed_when: false
        become: yes

      - name: create the private network
        shell: |
            source ~/{{ install.overcloud.stack }}rc
            openstack --insecure network create private

      - name: print network details to console
        shell: |
            source ~/{{ install.overcloud.stack }}rc
            neutron net-show {{ network_name }}
        tags: skip_ansible_lint
        changed_when: false

      - name: create ipv4 subnet pool
        vars:
            subnetpool_name: "{{ subnetpool.name|default('shared-default-subnetpool-v4') }}"
        shell: |
            source ~/{{ install.overcloud.stack }}rc
            if ! openstack subnet pool show {{ subnetpool_name }} -f value -c id; then
                openstack subnet pool create {{ subnetpool_name }} \
                    --default-prefix-length 26 \
                    --pool-prefix {{ subnetpool.cidr }} \
                    --share --default \
                    -f value -c id
            fi
        register: subnetpool_create
        when: subnetpool is defined

      - name: print subnet pool details to console
        shell: |
            source ~/{{ install.overcloud.stack }}rc
            openstack subnet pool show {{ subnetpool_create.stdout }}
        tags: skip_ansible_lint
        changed_when: false
        when: subnetpool is defined

      - name: create the private subnet
        vars:
            # It's cleaner to define top defaults first
            pool: "{{ subnet.allocation_pool|default({}) }}"
            default_subnet_pool: "{{ '' if 'cidr' in subnet else '--use-default-subnet-pool' }}"
            cidr: "{{ 'cidr' in subnet | ternary('--subnet-range ' + subnet.cidr|default(''), '' }}"
        shell: |
            source ~/{{ install.overcloud.stack }}rc
            openstack --insecure subnet create {{ subnet.name | default('private_subnet') }} \
            --network private {{ default_subnet_pool }} {{ cidr } \
            {{ pool|ternary('--allocation-pool start=' + pool.start|string + ',end=' + pool.end|string, '') }} \
        when: subnet is defined

      - name: print subnet details to console
        shell: |
            source ~/{{ install.overcloud.stack }}rc
            openstack subnet show {{ subnet.name | default('private_subnet') }}
        tags: skip_ansible_lint
        changed_when: false
        when: subnet is defined

      - name: create ipv6 subnet pool
        vars:
            subnetpool_name: "{{ ipv6_subnetpool.name|default('shared-default-subnetpool-v6') }}"
        shell: |
            source ~/{{ install.overcloud.stack }}rc
            if ! openstack subnet pool show {{ subnetpool_name }} -f value -c id; then
                openstack subnet pool create {{ subnetpool_name }} \
                    --default-prefix-length 64 \
                    --pool-prefix {{ ipv6_subnetpool.cidr }} \
                    --share --default \
                    -f value -c id
            fi
        register: ipv6_subnetpool_create
        when: ipv6_subnetpool is defined

      - name: print subnet pool details to console
        shell: |
            source ~/{{ install.overcloud.stack }}rc
            openstack subnet pool show {{ ipv6_subnetpool_create.stdout }}
        tags: skip_ansible_lint
        changed_when: false
        when: ipv6_subnetpool is defined

      - name: create the private ipv6 subnet
        vars:
            # Here can't be used {{ path_venv }}, because it's not a Jinja template
            ansible_python_interpreter: "/var/tmp/venv_shade/bin/python"
            # It's cleaner to define top defaults first
            pool: "{{ ipv6_subnet.allocation_pool|default({}) }}"
            cidr: "{{ 'cidr' in ipv6_subnet | ternary('--subnet-range ' + ipv6_subnet.cidr|default(''), '' }}"
            default_subnet_pool: "{{ '' if 'cidr' in ipv6_subnet else '--use-default-subnet-pool' }}"
            ipv6_address_mode: "{{ ipv6_subnet.address_mode | default('slaac') }}"
            ipv6_ra_mode: "{{ ipv6_subnet.ra_mode | default('slaac') }}"
        shell: |
            source ~/{{ install.overcloud.stack }}rc
            openstack --insecure subnet create {{ ipv6_subnet.name | default('private_ipv6_subnet') }} \
            --network  {{ net_create.network.name }} --ip-version 6  \
            {{ default_subnet_pool }} {{cidr}} \
            {{ pool|ternary('--allocation-pool start=' + pool.start|string + ',end=' + pool.end|string, '') }} \
            --ipv6-ra-mode {{ipv6_ra_mode}} --ipv6_address_mode {{ ipv6_address_mode }} \
        when: ipv6_subnet is defined

      - name: print subnet details to console
        shell: |
            source ~/{{ install.overcloud.stack }}rc
            openstack subnet show {{ ipv6_subnet.name | default('private_ipv6_subnet') }}
        tags: skip_ansible_lint
        changed_when: false
        when: ipv6_subnet is defined

      - name: create router with IPv4 subnet
        vars:
            router_name: {{ router.name | default('router-private') }}
        shell: |
            source ~/{{ install.overcloud.stack }}rc
            set -ex
            openstack --insecure router create {{ router_name }}
            openstack --insecure router set --external-gateway "{{ install.public.get('net', {}).name|default(pool_name.stdout_lines|last) }}" {{ router_name }}
            openstack --insecure router add subnet {{ router_name }}
            openstack --insecure router show {{ router_name }}
        when: subnet is defined
      - name: create/update router with IPv6 subnet
        vars:
            router_name: {{ router.name | default('router1') }}
        shell: |
            source ~/{{ install.overcloud.stack }}rc
            set -ex
            openstack --insecure router create {{ router_name }}
            openstack --insecure router set --external-gateway "{{ install.public.get('net', {}).name|default(pool_name.stdout_lines|last) }}" {{ router_name }}
            openstack --insecure router add subnet {{ router_name }}  {{ ipv6_subnet.name }}
            openstack --insecure router show {{ router_name }}
        when: ipv6_subnet is defined

      - name: get router public IPv6 address
        shell: |
            source ~/{{ install.overcloud.stack }}rc
            # Use jq twice to parse OSP13 and OSP16 output format
            openstack router show -f json -c external_gateway_info \
                {{ router.name | default('router-private') }} | \
                jq -r ".external_gateway_info" | jq -r ".external_fixed_ips[].ip_address" | grep ::
        register: router_public_address
        when: ipv6_subnet is defined

      - name: add a route to the private ipv6 subnet from the undercloud
        vars:
            cidr: "{{ ipv6_subnetpool.cidr if ipv6_subnetpool is defined else ipv6_subnet.cidr }}"
        shell: |
            if ! ip -6 route | grep '^{{ cidr }}' 2> /dev/null; then
                ip route add {{ cidr }} \
                    via {{ router_public_address.stdout }}
            fi
        become: true
        when: ipv6_subnet is defined

      - name: get ipv6 route interface
        vars:
            cidr: "{{ ipv6_subnetpool.cidr if ipv6_subnetpool is defined else ipv6_subnet.cidr }}"
        shell: |
            ip -6 route show {{ cidr }} | \
                awk '{for(i=1;i<NF;i++)if($i=="dev")print($(i+1))}'
        register: ipv6_interface
        become: true
        when: ipv6_subnet is defined

      - name: add persistent route to private ipv6 subnet
        vars:
            cidr: "{{ ipv6_subnetpool.cidr if ipv6_subnetpool is defined else ipv6_subnet.cidr }}"
            interface: "{{ ipv6_interface.stdout_lines[0] }}"
            gateway: "{{ router_public_address.stdout_lines[0] }}"
        copy:
            content: |
                {{ cidr }} via {{ gateway }} dev {{ interface }}
            dest: "/etc/sysconfig/network-scripts/route6-{{ interface }}"
        become: true
        when: ipv6_subnet is defined
