- name: Mariadb block
  become: true
  delegate_to: "{{ rc_valid_controller_nodes | first }}"
  block:
    - name: Generate mariadb check script
      copy:
        content: |
          #!/usr/bin/env bash
          if ! podman exec -ti -u root "$(podman ps | awk '/galera/ || /mysql/ {print $1}')" \
              mysql --disable-column-names \
                    --batch \
                    --execute="SHOW STATUS LIKE 'wsrep_local_state_comment'; SHOW STATUS LIKE 'wsrep_cluster_size';" | \
                    grep -e 'wsrep_local_state_comment\tSynced'; then
            echo -e 'Database out of sync'
            exit 1
          fi

          {% if rc_perform_undercloud_db_backup | bool %}
          podman exec -ti -u root "$(podman ps | awk '/galera/ || /mysql/ {print $1}')" \
          mysqldump --all-databases \
                    --quick \
                    --single-transaction | gzip > {{ ansible_env.HOME }}/backup/dump_db_undercloud.sql.gz
          {% endif %}
        dest: "{{ ansible_env.HOME }}/check-db.sh"
        mode: "0755"

    - name: Create backup directory
      file:
        state: directory
        path: "{{ ansible_env.HOME }}/backup"
        owner: "{{ ansible_env.USER }}"

    - name: Run mariadb check script
      command: "{{ ansible_env.HOME }}/check-db.sh"

- name: get openstack-nova-compute status
  command: >-
    systemctl status {{ nova_compute_service }}
  failed_when: false
  changed_when: false
  register: openstack_nova_compute_status

- name: get nova status in case of containerized undercloud
  command: >-
    {{ container_runtime }} inspect -f '{{ "{{.State.Running }}" }}' nova_compute
  failed_when: false
  changed_when: false
  register: nova_compute_docker_status

- name: check stack status
  shell: |-
      source ~/stackrc
      openstack stack list  -f value -c "Stack Status"
  register: stack_status
  tags:
    - skip_ansible_lint

- name: general asserts
  vars:
    non_containers_nova_status: "{{ openstack_nova_compute_status|succeeded and openstack_nova_compute_status.rc == 0 }}"
    containers_nova_status: "{{ nova_compute_docker_status|succeeded and nova_compute_docker_status.rc == 0 and nova_compute_docker_status.stdout == 'true' }}"
  assert:
    that:
      - "stack_status.stdout in ['CREATE_COMPLETE', 'UPDATE_COMPLETE']"
      - "non_containers_nova_status|bool or containers_nova_status|bool"

- name:  pacemaker checks
  become: true
  delegate_to: "{{ rc_valid_controller_nodes | first }}"
  block:
    - name: get pacemaker cluster status
      shell: pcs status 2>&1 | grep 'cluster is not currently running on this node'
      register: pcs_cluster_active
      failed_when: false
      changed_when: false

    - name: Verify pacemaker cluster is active
      assert:
        that:
          - pcs_cluster_active.rc > 0

    - name: get pacemaker online nodes
      shell: pcs status | grep -w Online
      register: pcs_online_nodes
      failed_when: false
      changed_when: false

- name: Verify pacemaker online nodes
  assert:
    that:
      - "item in pcs_online_nodes.stdout"
  with_items: "{{ rc_valid_controller_nodes }}"

- name: disable fencing
  become: true
  delegate_to: "{{ rc_valid_controller_nodes|first }}"
  shell: |
    pcs property set stonith-enabled=false
