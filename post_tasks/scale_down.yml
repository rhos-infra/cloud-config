- name: Gather facts for Overcloud Nodes
  hosts: overcloud_nodes:!unused
  gather_facts: yes
  any_errors_fatal: true

- name: Scale down
  hosts: undercloud
  gather_facts: no
  any_errors_fatal: true
  vars:
      node_name: "{{ install.node.name }}.localdomain"
  tasks:
      - name: get all nova compute nodes
        shell: |
            source ~/{{ install.overcloud.stack }}rc
            openstack compute service list -f value -c Host --service nova-compute
        register: nova_computes
        tags: skip_ansible_lint

      - name: fail if we don't have "{{ node_name }}"
        fail:
            msg: "There is no such node {{ node_name }}"
        when: node_name not in nova_computes.stdout_lines

      - name: disable nova services on the node "{{ node_name }}"
        shell: |
            source ~/{{ install.overcloud.stack }}rc
            openstack compute service set "{{ node_name }}" nova-compute --disable
        tags: skip_ansible_lint

      - name: get the deployed stack-id
        shell: |
            source ~/stackrc
            openstack stack list -f value -c ID
        register: stack_id
        tags: skip_ansible_lint

      - block:
            - name: get nodes UUID
              shell: |
                  source ~/stackrc
                  openstack stack resource list overcloud -n5 --filter type=OS::TripleO::ComputeDeployedServerServer -f json
              register: splitstack_nodes_ids
              tags: skip_ansible_lint

            - name: Create node_ids list
              set_fact:
                  node_ids: "{{ splitstack_nodes_ids.stdout|from_json }}"

            - name: Set node_uuid from physical_resource_id
              set_fact:
                  node_uuid: "{{ item.physical_resource_id }}"
              when: node_index|int == stack_index|int
              vars:
                  node_index: "{{ install.node.name.split('-')[-1] }}"
                  stack_index: "{{ item.stack_name.split('-')[-2] }}"
              with_items: "{{ node_ids }}"

            - name: Find ctrlplane-template.yml location
              shell: cat ~/overcloud_deploy.sh | grep ctrlplane-template.yml | awk '{print $2}'
              register: ctrlplane_template_location

            - name: Create control plane network template
              template:
                  src: "scale/ctrlplane-template.yml.j2"
                  dest: "{{ ctrlplane_template_location.stdout }}"
                  backup: yes
                  force: yes

        when: install.splitstack|default(False)

      - block:
            - name: get the UUID of "{{ install.node.name }}"
              shell: |
                  source ~/stackrc
                  openstack server list --name {{ install.node.name }} -f value -c ID

              register: node_uuid_info
              tags: skip_ansible_lint

            - name: Set node_uuid
              set_fact:
                  node_uuid: "{{ node_uuid_info.stdout }}"

        when: not install.splitstack|default(False)

      - name: get imports from depployment file
        shell: cat ~/overcloud_deploy.sh | grep -e "^-e" -e "^--environment-file"
        register: env_imports
        tags: skip_ansible_lint

      - name: generate scale down script
        template:
            src: scale/overcloud_node_scale.sh.j2
            dest: ~/overcloud_node_scale.sh

      - name: run scale down script
        shell: |
            source ~/stackrc
            #bash ~/overcloud_node_scale.sh &> overcloud_scale.log
            bash ~/overcloud_node_scale.sh &> overcloud_scale.log || while ! ( [[ `openstack stack list  -f value -c "Stack Status"` == "UPDATE_COMPLETE" ]] || [[ `openstack stack list  -f value -c "Stack Status"` == "UPDATE_FAILED" ]] ); do echo "Querying the stack status"; sleep 60; done #BZ1499020 - temp workaround
        register: overcloud_scale
        ignore_errors: yes
        tags: skip_ansible_lint

- name: Try to update inventory
  import_playbook: add_overcloud_hosts.yml
  tags:
      - inventory_update

- name: Print scale down status
  hosts: undercloud
  gather_facts: no
  any_errors_fatal: true
  vars:
      node_name: "{{ install.node.name }}.localdomain"
  tasks:
      - name: Print the last few lines of the output to spot failures
        command: tail -n60 overcloud_scale.log

      # List of failures is supported since RHOS10
      - name: Print stack failures
        shell: |
            source ~/stackrc
            openstack stack failures list overcloud
        when:
            - overcloud_scale is defined
            - overcloud_scale.rc != 0
            - install.version|default(undercloud_version)|openstack_release >= 10
        tags: skip_ansible_lint

      - fail:
            msg: "Scale operation has failed... :("
        when: overcloud_scale is defined and overcloud_scale.rc != 0

      - name: get service-id of the node "{{ node_name }}"
        shell: |
            source ~/{{ install.overcloud.stack }}rc
            openstack compute service list -c ID -f value --host {{ node_name }}
        register: service_id
        tags: skip_ansible_lint

      - name: delete compute service for node "{{ node_name }}"
        shell: |
            source ~/{{ install.overcloud.stack }}rc
            openstack compute service delete {{ service_id.stdout }}
        tags: skip_ansible_lint
        ignore_errors: yes

      # (todo) OSPD 10 doesn't support --host paramater
      - name: get openvswitch-agent-id of the node "{{ node_name }}"
        shell: |
            source ~/{{ install.overcloud.stack }}rc
            #openstack network agent list -c ID -f value --host {{ node_name }}
            neutron agent-list -f value | grep {{ node_name }} | awk '{print $1}'
        register: openwsitch_agent_id
        tags: skip_ansible_lint

      # (todo) have to use deprecated 'neutron' call because of #BZ1430338
      - name: delete openvswitch agent for node "{{ node_name }}"
        shell: |
            source ~/{{ install.overcloud.stack }}rc
            #openstack network agent delete {{ openwsitch_agent_id.stdout }}
            neutron agent-delete {{ openwsitch_agent_id.stdout }}
        tags: skip_ansible_lint
        ignore_errors: yes
