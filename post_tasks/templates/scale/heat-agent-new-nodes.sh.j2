#!/bin/bash
. ~/stackrc

set -eux

{% for role, role_details in scale_up_dict.items() %}
{% if role_details.new_ips is defined %}
{{ role }}DeployedServer_hosts="{% for host in role_details.new_ips %}{{ host }} {% endfor %}"
{{ role }}DeployedServer_total_hosts={{ role_details.count }}
{{ role }}DeployedServer_old_hosts_stack_ids=({% for stack in role_details.stacks %}'{{ stack }}'{% if not loop.last %}, {% endif %}{% endfor %})
{% endif %}
{% endfor %}
SLEEP_TIME=5

OVERCLOUD_ROLES="{% for role, role_details in scale_up_dict.items() %}{% if role_details.new_ips is defined %}{{ role }}DeployedServer {% endif %}{% endfor %}"
STACK_NAME=${STACK_NAME:-"{{ install.overcloud.stack }}"}

SUBNODES_SSH_KEY=${SUBNODES_SSH_KEY:-"~/.ssh/id_rsa"}
SSH_OPTIONS="-tt -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=Verbose -o PasswordAuthentication=no -o ConnectionAttempts=32"

export OVERCLOUD_HOSTS="{% for role, role_details in scale_up_dict.items() %}{% if role_details.new_ips is defined %}{% for host in role_details.new_ips %}{{ host }} {% endfor %}{% endif %}{% endfor %}"
/usr/share/openstack-tripleo-heat-templates/deployed-server/scripts/enable-ssh-admin.sh

# Set the _hosts_a vars for each role defined
for role in $OVERCLOUD_ROLES; do
    eval hosts=\${${role}_hosts}
    read -a ${role}_hosts_a <<< $hosts
done

admin_user_id=$(openstack user show admin -c id -f value)
admin_project_id=$(openstack project show admin -c id -f value)

function check_stack {
    local stack_to_check=${1:-""}

    if [ "$stack_to_check" = "" ]; then
        echo Stack not created
        return 1
    fi

    echo Checking if $1 stack is created
    set +e
    openstack stack resource list $stack_to_check
    rc=$?
    set -e

    if [ ! "$rc" = "0" ]; then
        echo Stack $1 not yet created
    fi

    return $rc
}


for role in $OVERCLOUD_ROLES; do
    while ! check_stack $STACK_NAME; do
        sleep $SLEEP_TIME
    done

    rg_stack=$(openstack stack resource show $STACK_NAME $role -c physical_resource_id -f value)
    while ! check_stack $rg_stack; do
        sleep $SLEEP_TIME
        rg_stack=$(openstack stack resource show $STACK_NAME $role -c physical_resource_id -f value)
    done

    role_total_count=
    eval role_total_count=\${${role}_total_hosts}

    stacks_count=$(openstack stack resource list $rg_stack -c resource_name -c physical_resource_id -f value | wc -l)
    while [[ "$stacks_count" -ne "$role_total_count" ]]; do
        sleep $SLEEP_TIME
        stacks_count=$(openstack stack resource list $rg_stack -c resource_name -c physical_resource_id -f value | wc -l)
    done

    stacks=$(openstack stack resource list $rg_stack -c resource_name -c physical_resource_id -f json | jq -r "sort_by(.resource_name) | .[] | .physical_resource_id")

    i=0

    for stack in $stacks; do
        if [[ ! ${ComputeDeployedServer_old_hosts_stack_ids[*]} =~ $stack ]]; then
            server_resource_name=$role
            if [ "$server_resource_name" = "Compute" ]; then
                server_resource_name="NovaCompute"
            fi

            server_stack=$(openstack stack resource show $stack $server_resource_name -c physical_resource_id -f value)
            while ! check_stack $server_stack; do
                sleep $SLEEP_TIME
                server_stack=$(openstack stack resource show $stack $server_resource_name -c physical_resource_id -f value)
            done

            while true; do
                deployed_server_metadata_url=$(openstack stack resource metadata $server_stack deployed-server | jq -r '.["os-collect-config"].request.metadata_url')
                if [ "$deployed_server_metadata_url" = "null" ]; then
                    continue
                else
                    break
                fi
            done

            echo "======================"
            echo "$role$i deployed-server.json configuration:"

            config="{
  \"os-collect-config\": {
    \"collectors\": [\"request\", \"local\"],
    \"request\": {
      \"metadata_url\": \"$deployed_server_metadata_url\"
    }
  }
}"

            echo "$config"
            echo "======================"
            echo


            host=
            eval host=\${${role}_hosts_a[i]}
            if [ -n "$host" ]; then
                ssh $SSH_OPTIONS -i $SUBNODES_SSH_KEY $host "echo '$config' > deployed-server.json"
                ssh $SSH_OPTIONS -i $SUBNODES_SSH_KEY $host sudo mkdir -p -m 0700 /var/lib/os-collect-config/local-data/ || true
                ssh $SSH_OPTIONS -i $SUBNODES_SSH_KEY $host sudo cp deployed-server.json /var/lib/os-collect-config/local-data/deployed-server.json
                ssh $SSH_OPTIONS -i $SUBNODES_SSH_KEY $host sudo systemctl start os-collect-config
                ssh $SSH_OPTIONS -i $SUBNODES_SSH_KEY $host sudo systemctl enable os-collect-config
            fi

            let i+=1

        fi

    done


done