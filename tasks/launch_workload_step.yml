---
# This playbook is used to launch an instance and attach a floating IP to it with all the required steps
# such as image, network, subnet or router creation.

- name: Register stack user pub key
  command: cat ~/.ssh/id_rsa.pub
  register: pub_key

- block:
    - name: Check if workload image is present
      os_image_facts:
          # Required for SSL
          validate_certs: no
          cloud: overcloud
          image: "workload_image_{{ step }}"
      register: workload_image_info

    - when: workload_image_info['openstack_image'] | length < 1
      block:
          - name: Download image
            get_url:
                url: "{{ install.workload.image.url }}"
                dest: /tmp/workload_image.qcow2
            register: _download_image
            retries: 10
            delay: 5
            until: _download_image is success

          - name: Upload image into glance
            os_image:
                # Required for SSL
                validate_certs: no
                cloud: overcloud
                name: "workload_image_{{ step }}"
                disk_format: qcow2
                container_format: bare
                filename: "/tmp/workload_image.qcow2"

    - name: Create flavor
      os_nova_flavor:
          # Required for SSL
          validate_certs: no
          cloud: overcloud
          state: present
          name: workload_flavor_{{ step }}
          ram: "{{ install.workload.memory }}"
          vcpus: "{{ install.workload.vcpu }}"
          disk: "{{ install.workload.disk }}"

    - name: Create internal network
      os_network:
          # Required for SSL
          validate_certs: no
          cloud: overcloud
          state: present
          name: workload_internal_net_{{ step }}
          external: false
      register: workload_internal_net

    - name: Create internal subnet
      os_subnet:
          # Required for SSL
          validate_certs: no
          cloud: overcloud
          state: present
          network_name: workload_internal_net_{{ step }}
          name: workload_internal_net_subnet_{{ step }}
          cidr: 192.168.0.0/24

    - name: Register overcloud network facts
      os_networks_facts:
          # Required for SSL
          validate_certs: no
          cloud: overcloud
          filters:
              router:external: true

    - name: Create router
      os_router:
          # Required for SSL
          validate_certs: no
          cloud: overcloud
          state: present
          name: workload_router_{{ step }}
          network: "{{ openstack_networks[0].name }}"
          interfaces:
            - workload_internal_net_subnet_{{ step }}

    - name: Create security group
      os_security_group:
          # Required for SSL
          validate_certs: no
          cloud: overcloud
          state: present
          name: workload_secgroup_{{ step }}
          description: security group for overcloud test workload

    - name: Create ICMP security group rule
      os_security_group_rule:
          # Required for SSL
          validate_certs: no
          cloud: overcloud
          state: present
          security_group: workload_secgroup_{{ step }}
          protocol: icmp
          remote_ip_prefix: 0.0.0.0/0

    - name: Create SSH security group rule
      os_security_group_rule:
          # Required for SSL
          validate_certs: no
          cloud: overcloud
          state: present
          security_group: workload_secgroup_{{ step }}
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
          remote_ip_prefix: 0.0.0.0/0

    - name: Create HTTP security group rule
      os_security_group_rule:
          # Required for SSL
          validate_certs: no
          cloud: overcloud
          state: present
          security_group: workload_secgroup_{{ step }}
          protocol: tcp
          port_range_min: 80
          port_range_max: 80
          remote_ip_prefix: 0.0.0.0/0

    - name: Create keypair
      os_keypair:
          # Required for SSL
          validate_certs: no
          cloud: overcloud
          state: present
          name: workload_key_{{ step }}
          public_key: "{{ pub_key.stdout }}"
  delegate_to: "{{ groups.shade | first }}"
  vars:
    ansible_python_interpreter: "/var/tmp/venv_shade/bin/python"

# Create instance from undercloud via Openstack cli as the os_server module fails with
# ShadeAdapter' object has no attribute 'get_api_major_version': RHOSINFRA-1562
- name: Create instance if it does not already exist
  shell: |
      return_code=0
      source ~/{{ install.overcloud.stack }}rc
      if ! openstack server list -f value -c Name | grep workload_instance_{{ step }}; then
          openstack server create \
              --image workload_image_{{ step }} \
              --flavor workload_flavor_{{ step }} \
              --security-group workload_secgroup_{{ step }} \
              --key-name  workload_key_{{ step }} \
              --nic net-id={{ workload_internal_net.id }} \
              workload_instance_{{ step }}
          return_code=3
      fi
      exit ${return_code}
  args:
      executable: /bin/bash
  register: workload_instance_present
  failed_when: workload_instance_present.rc not in [0,3]
  changed_when: workload_instance_present.rc == 3

- name: Wait for instance to be in active state
  vars:
    jq_old: jq -r -c '.[]|select(.Field == "status").Value'
    jq_current: jq -r -c .status
    jq_query: "{{ (install.version|default(undercloud_version)|openstack_release >= 9)|ternary(jq_current, jq_old) }}"
  shell: |
      source ~/{{ install.overcloud.stack }}rc
      openstack server show workload_instance_{{ step }} -f json | \
          {{ jq_query }}
  register: instance_state
  until: instance_state.stdout.find("ACTIVE") > -1
  retries: 30
  delay: 5

- block:
    ## register facts to check if floating IP is assigned
    ## os_floating_ip is not idempotent in some cases such
    ## as with the vlan jobs scenario
    - name: Register workload instance facts
      os_server_facts:
          # Required for SSL
          validate_certs: no
          cloud: overcloud
          server: workload_instance_{{ step }}

    - name: Assign floating IP to workload instance
      vars:
        network_name: "{{ install.public.get('net', {}).name|default(pool_name.stdout_lines|last) }}"
      os_floating_ip:
          # Required for SSL
          validate_certs: no
          cloud: overcloud
          network: "{{ network_name }}"
          server: workload_instance_{{ step }}
          wait: yes
      when: openstack_servers[0].addresses.items() | list | first | last | length == 1

    ## register facts for a second time after floating IP
    ## was assigned
    - name: Register workload instance facts
      os_server_facts:
          # Required for SSL
          validate_certs: no
          cloud: overcloud
          server: workload_instance_{{ step }}
      when: openstack_servers[0].addresses.items() | list | first | last | length == 1
  delegate_to: "{{ groups.shade | first }}"
  vars:
    ansible_python_interpreter: "/var/tmp/venv_shade/bin/python"


- name: Wait for port 22 to become open on workload instance
  wait_for:
      port: 22
      host: "{{ (openstack_servers[0].addresses.items() | list | first | last | last).addr }}"
      search_regex: SSH-2.0
      delay: 5
