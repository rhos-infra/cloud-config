- include_role:
      name: vbmc
  vars:
      vbmc_nodes: "{{ install.scale.nodes }}"
  when: undercloud_version | openstack_release >= 11

- name: discover provsion network name
  include_tasks: discover_provision_net.yml
  vars:
      uc_provision_net: "ctlplane"

- name: generate instackenv file
  include_tasks: generate_instackenv.yml

- name: register nodes to instack
  shell: |
      source ~/stackrc
      {% if install.version|default(undercloud_version) |openstack_release < 13 %}
      openstack baremetal import --json {{ instackenv_file_name }}
      {% else %}
      openstack overcloud node import {{ instackenv_file_name }}
      {% endif %}
  tags: skip_ansible_lint

- name: get nodes UUID
  shell: |
      source ~/stackrc
      openstack baremetal node show  {{ item }} -c uuid | grep 'uuid' | awk '{print $4}'
  with_items: "{{ install.scale.nodes }}"
  register: nodes_uuid_info

- name: provision state of baremetal node to manage
  shell: |
      source ~/stackrc
      openstack baremetal node manage {{ item.stdout }}
  with_items: "{{ nodes_uuid_info.results }}"
  tags: skip_ansible_lint
  when: install.version|default(undercloud_version) |openstack_release < 13

- name: start node introspection
  shell: |
      source ~/stackrc
      openstack overcloud node introspect {{ item.stdout }} --provide
  with_items: "{{ nodes_uuid_info.results }}"
  tags: skip_ansible_lint

- name: set additional properties
  shell: |
      source ~/stackrc
      openstack baremetal node set --property capabilities='profile:{{ item.item.rstrip('1234567890-').split('-')[-1] }},boot_option:local' {{ item.stdout }}
  with_items: "{{ nodes_uuid_info.results }}"
  tags: skip_ansible_lint

- name: Check if node name is not None
  shell: |
      source ~/stackrc
      openstack baremetal node list -c Name -f value|grep -zqvi None
  register: check_nodename
  failed_when: false
  changed_when: false

- name: Print resource-class debug message
  vars:
      message: |
          Currently custom resource class(es) is available only for the
          virtual deployment, since node name is used to associate custom
          resource class with it and when node name is 'None'
          scheduling based on resource class is skipping
  debug:
      msg: "{{ message.split('\n') }}"
  when: check_nodename.rc != 0

- block:
    - name: Set default resource-class parameters
      vars:
          name: "{{ item.rstrip('1234567890-').split('-')[-1] }}"
      set_fact:
          default_resource_class: "{{ default_resource_class | default([]) + [{ 'name': name, 'flavor': name, 'node': item }] }}"
      with_items: "{{ install.scale.nodes | default([])}}"
      tags: skip_ansible_lint

    - name: Merge default and override resource class parameters
      set_fact:
          resource_class: "{{ default_resource_class + install.resource.class.get('override', []) }}"

    - name: Add resource class to flavor and node
      shell: |
          set -exo pipefail

          REGEX=".*-[0-9]+$"
          source ~/stackrc
          # Remove already exist custom resource class for flavor
          for rclass in $(openstack flavor show {{ item.flavor }} -f value -c properties | grep -o 'CUSTOM_[A-Z_]*'); do
              openstack flavor unset {{ item.flavor }} --property resources:${rclass}
          done

          openstack flavor set {{ item.flavor }} \
              --property resources:DISK_GB=0 \
              --property resources:MEMORY_MB=0 \
              --property resources:VCPU=0 \
              --property resources:CUSTOM_{{ item.name.replace('-', '_').upper() }}=1
          {% for node in item.node.split(':') %}
              if [[ "{{ node }}" =~ $REGEX ]]; then
                  openstack baremetal node set $(openstack baremetal node show {{ node }} -c uuid -f value) \
                  --resource-class {{ item.name }}
              else
                  openstack baremetal node list|awk '/{{ node }}/ {print $2}'| \
                  xargs -I{} openstack baremetal node set {} --resource-class {{ item.name }}
              fi
          {% endfor %}
      tags: skip_ansible_lint
      with_items: "{{ resource_class }}"
  when:
      - check_nodename.rc == 0
      - install.resource.class.enabled
      - install.version|default(undercloud_version)|openstack_release >= 12

- name: get kernel image uuid
  shell: |
      source ~/stackrc
      openstack image show bm-deploy-kernel -c id | grep 'id' | awk '{print $4}'
  register: kernel_uuid

- name: get ramdisk image uuid
  shell: |
      source ~/stackrc
      openstack image show bm-deploy-ramdisk -c id | grep 'id' | awk '{print $4}'
  register: ramdisk_uuid

- name: set kernel image
  shell: |
      source ~/stackrc
      openstack baremetal node set --driver-info deploy_kernel='{{ kernel_uuid.stdout }}' {{ item.stdout }}
  with_items: "{{ nodes_uuid_info.results }}"
  tags: skip_ansible_lint

- name: set ramdisk image
  shell: |
      source ~/stackrc
      openstack baremetal node set --driver-info deploy_ramdisk='{{ ramdisk_uuid.stdout }}' {{ item.stdout }}
  with_items: "{{ nodes_uuid_info.results }}"
  tags: skip_ansible_lint

- name: calculate new nodes count
  set_fact:
      new_nodes_count: "{{ new_nodes_count|default({})|combine({ node_type: (new_nodes_count|default({})).get(node_type)|default(0)|int + 1 }) }}"
  vars:
      node_type: "{{ item.rstrip('1234567890-').split('-')[-1] }}"
  with_items: "{{ install.scale.nodes }}"

- name: check for nodes data
  shell: grep -E 'nodes_data.yaml|nodes.yaml' {{ overcloud_deploy_script }}
  ignore_errors: true
  register: is_node_data

- block:
      - name: get current scale for nodes
        shell: cat {{ overcloud_deploy_script }} | egrep '^\-\-{{ node_type }}(-.*)?-scale' | awk '{print $2}'
        vars:
            node_type: "{{ item.key }}"
        with_dict: "{{ new_nodes_count }}"
        register: current_node_count

      - name: Update scale count in overcloud deploy script
        replace:
            path: "{{ overcloud_deploy_script }}"
            regexp: "^(--{{ item.item.key }}(-.*)?-scale) {{ item.stdout }}"
            replace: "\\1 {{ item.stdout|int + new_nodes_count[item.item.key]|int }}"
            backup: yes
        with_items: "{{ current_node_count.results }}"

  when: is_node_data.rc != 0

- block:
      - name: get nodes data file location
        shell: cat {{ overcloud_deploy_script }} | grep -E 'nodes_data.yaml|nodes.yaml' | awk '{print $2}'
        ignore_errors: true
        register: nodes_data_path

      - name: get current scale for nodes
        shell: cat {{ nodes_data_path.stdout }} | egrep -i '{{ node_type }}.*Count:' | awk '{print $2}'
        vars:
            node_type: "{{ item.key }}"
        with_dict: "{{ new_nodes_count }}"
        register: current_node_count

      - name: Update scale count in overcloud deploy script
        replace:
            path: "{{ nodes_data_path.stdout }}"
            regexp: "(?i)^(\\s+{{ item.item.key }}.*Count:) {{ item.stdout }}"
            replace: "\\1 {{ item.stdout|int + new_nodes_count[item.item.key]|int }}"
            backup: yes
        with_items: "{{ current_node_count.results }}"

      - name: Print nodes data yaml
        command: "cat {{ nodes_data_path.stdout }}"

  when: is_node_data.rc == 0
